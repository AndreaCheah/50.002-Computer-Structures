/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module clocked_address_21 (
    input clk,
    input rst,
    input [1:0] level,
    output reg [9:0] rom_address_out,
    output reg shift_down
  );
  
  
  
  reg current_clk;
  
  wire [1-1:0] M_c_clk_edge_out;
  reg [1-1:0] M_c_clk_edge_in;
  edge_detector_4 c_clk_edge (
    .clk(clk),
    .in(M_c_clk_edge_in),
    .out(M_c_clk_edge_out)
  );
  reg [9:0] M_rom_address_d, M_rom_address_q = 1'h0;
  wire [32-1:0] M_general_clock_value;
  counter_23 general_clock (
    .clk(clk),
    .rst(rst),
    .value(M_general_clock_value)
  );
  
  always @* begin
    M_rom_address_d = M_rom_address_q;
    
    
    case (level)
      2'h0: begin
        current_clk = M_general_clock_value[28+0-:1];
      end
      2'h1: begin
        current_clk = M_general_clock_value[27+0-:1];
      end
      2'h2: begin
        current_clk = M_general_clock_value[26+0-:1];
      end
      2'h3: begin
        current_clk = M_general_clock_value[25+0-:1];
      end
      default: begin
        current_clk = 1'h0;
      end
    endcase
    M_c_clk_edge_in = current_clk;
    if (M_c_clk_edge_out) begin
      M_rom_address_d = M_rom_address_q + 1'h1;
    end
    shift_down = M_c_clk_edge_out;
    rom_address_out = M_rom_address_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_rom_address_q <= 1'h0;
    end else begin
      M_rom_address_q <= M_rom_address_d;
    end
  end
  
endmodule
