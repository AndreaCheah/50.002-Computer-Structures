/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_v2_10 (
    input clk,
    input rst,
    input button_1,
    input button_2,
    input button_3,
    input start_button,
    input reset_button,
    input [15:0] alu_read,
    input [14:0] led_in,
    output reg [1:0] level,
    output reg [15:0] data_goto_reg,
    output reg [5:0] alufn,
    output reg [1:0] asel,
    output reg [1:0] bsel,
    output reg we_regfile,
    output reg [3:0] regfile_write_address,
    output reg [3:0] regfile_read_address_a,
    output reg [3:0] regfile_read_address_b,
    output reg wdsel,
    output reg [14:0] led_out,
    output reg dec_score_rst,
    output reg dec_score_inc
  );
  
  
  
  localparam START_game_fsm = 4'd0;
  localparam IDLE_game_fsm = 4'd1;
  localparam CHECKVALID_INPUT_game_fsm = 4'd2;
  localparam CORRECT_ANS_CHECK_game_fsm = 4'd3;
  localparam INCREASE_SCORE_game_fsm = 4'd4;
  localparam GAME_CONT_game_fsm = 4'd5;
  localparam GAMEOVER_game_fsm = 4'd6;
  localparam SCORE_10_game_fsm = 4'd7;
  localparam RESET_SCORE_game_fsm = 4'd8;
  localparam RESET_BUTTON_IN_game_fsm = 4'd9;
  localparam RESET_LEVEL_game_fsm = 4'd10;
  localparam RESET_TEMP_game_fsm = 4'd11;
  
  reg [3:0] M_game_fsm_d, M_game_fsm_q = START_game_fsm;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    we_regfile = 1'h0;
    regfile_write_address = 11'h457;
    regfile_read_address_a = 1'h0;
    regfile_read_address_b = 1'h0;
    wdsel = 1'h0;
    level = 1'h0;
    led_out = 15'h0000;
    dec_score_inc = 1'h0;
    dec_score_rst = 1'h0;
    
    case (M_game_fsm_q)
      START_game_fsm: begin
        dec_score_rst = 1'h1;
        dec_score_inc = 1'h0;
        if (button_1 | button_2 | button_3 | start_button | reset_button) begin
          if (start_button) begin
            M_game_fsm_d = IDLE_game_fsm;
          end else begin
            M_game_fsm_d = START_game_fsm;
          end
        end
      end
      IDLE_game_fsm: begin
        level = 1'h0;
        led_out = led_in;
        M_game_fsm_d = CHECKVALID_INPUT_game_fsm;
      end
      CHECKVALID_INPUT_game_fsm: begin
        if (button_1 | button_2 | button_3 | start_button | reset_button) begin
          we_regfile = 1'h1;
          wdsel = 1'h1;
          regfile_write_address = 4'h0;
          if (button_1) begin
            data_goto_reg = 16'h0001;
          end else begin
            if (button_2) begin
              data_goto_reg = 16'h0002;
            end else begin
              if (button_3) begin
                data_goto_reg = 16'h0004;
              end else begin
                data_goto_reg = 16'h0007;
              end
            end
          end
        end
        M_game_fsm_d = CORRECT_ANS_CHECK_game_fsm;
      end
      CORRECT_ANS_CHECK_game_fsm: begin
        alufn = 6'h32;
        we_regfile = 1'h0;
        regfile_read_address_a = 4'h0;
        bsel = 2'h2;
        if (alu_read) begin
          M_game_fsm_d = INCREASE_SCORE_game_fsm;
        end else begin
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
      end
      INCREASE_SCORE_game_fsm: begin
        dec_score_inc = 1'h1;
        alufn = 6'h00;
        we_regfile = 1'h1;
        regfile_write_address = 4'h2;
        bsel = 2'h1;
        M_game_fsm_d = SCORE_10_game_fsm;
      end
      SCORE_10_game_fsm: begin
        alufn = 6'h05;
        we_regfile = 1'h0;
        regfile_read_address_a = 4'h2;
        bsel = 2'h3;
        if (alu_read == 1'h0) begin
          wdsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h1;
          asel = 2'h0;
          bsel = 2'h1;
          level = alu_read[2+0-:1];
          M_game_fsm_d = GAME_CONT_game_fsm;
        end
        M_game_fsm_d = GAME_CONT_game_fsm;
      end
      GAME_CONT_game_fsm: begin
        we_regfile = 1'h1;
        wdsel = 2'h1;
        regfile_write_address = 4'h0;
        asel = 2'h1;
        M_game_fsm_d = CHECKVALID_INPUT_game_fsm;
      end
      GAMEOVER_game_fsm: begin
        led_out = 15'h0000;
        if (reset_button) begin
          M_game_fsm_d = RESET_SCORE_game_fsm;
        end else begin
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
      end
      RESET_SCORE_game_fsm: begin
        dec_score_rst = 1'h1;
        dec_score_inc = 1'h0;
        we_regfile = 1'h1;
        wdsel = 2'h1;
        regfile_write_address = 4'h2;
        asel = 2'h1;
        M_game_fsm_d = RESET_BUTTON_IN_game_fsm;
      end
      RESET_BUTTON_IN_game_fsm: begin
        we_regfile = 1'h1;
        wdsel = 2'h1;
        regfile_write_address = 4'h0;
        asel = 2'h1;
        M_game_fsm_d = RESET_LEVEL_game_fsm;
      end
      RESET_LEVEL_game_fsm: begin
        we_regfile = 1'h1;
        wdsel = 2'h1;
        regfile_write_address = 4'h1;
        asel = 2'h1;
        M_game_fsm_d = RESET_TEMP_game_fsm;
      end
      RESET_TEMP_game_fsm: begin
        we_regfile = 1'h1;
        wdsel = 2'h1;
        regfile_write_address = 4'hf;
        asel = 2'h1;
        M_game_fsm_d = START_game_fsm;
      end
      default: begin
        M_game_fsm_d = START_game_fsm;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_fsm_q <= 1'h0;
    end else begin
      M_game_fsm_q <= M_game_fsm_d;
    end
  end
  
endmodule
