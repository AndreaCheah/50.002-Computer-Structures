module game_CU_v2 (
    input clk,  // clock
    input rst,  // reset of module
    input button_1,    // need to make registers that store button input and concatenate them
    input button_2,
    input button_3,
    input start_button,
    input reset_button,   // reset button
    //input regfile_datain[16], //direct reading of regfile data from read_address_a
    input alu_read[16], //reading directly the value generated from using alufn in fsm without storing in regfile
    input led_in[5][3], //inputs the led output from the rom
    
    output level[2], // for the level generator
    output data_goto_reg[16], //data from our fsm or control unit can be used to rewrite value in reg if we=1 and wdel = 01
    output alufn[6],
    output asel[2],
    output bsel[2],
    output we_regfile,
    output regfile_write_address[4],    // rc
    output regfile_read_address_a[4],   // ra
    output regfile_read_address_b[4],   // rb
    output wdsel,
    output led_out[5][3], //outputs the led
    output dec_score_rst,
    output dec_score_inc
    
    
  ) {
  
  
  
  .clk(clk){
    .rst(rst){
      fsm game_fsm={
        START,
        IDLE,
        CHECKVALID_INPUT, //recieves all button inputs
        CORRECT_ANS_CHECK, //checks if button input value is same as first row of rom
        INCREASE_SCORE, //inceases score by 1
        GAME_CONT,
        GAMEOVER,
        SCORE_10, //checks if score is in multiples of 10
        //resetting the values in the register to 0
        RESET_SCORE,
        RESET_BUTTON_IN,
        RESET_LEVEL,
        RESET_TEMP
      };
    }
  }
  
  
  always {
    
    
    /*data_goto_reg[16], //data from our fsm or control unit can be used to rewrite value in reg if we=1 and wdel = 01
       if (we){
       case(write_address){    // rc
       b0000 : button_input.d = data; //to store what was the button pressed
       b0001 : level_input.d = data; //for our rom address
       b0010 : score.d = data;
       b1111 : temp1.d = data;
       
       case(game_controlunit.asel){
       b00 : inputAlu_a = regfile.out_a;
       b01 : inputAlu_a = 0;
       default :
       inputAlu_a = 0;
       
       case(game_controlunit.bsel){
       b00 : inputAlu_b = regfile.out_b;
       b01 : inputAlu_b = 1; //to increment score
       b10 : inputAlu_b = rom.out[0]; //to compare the value of the first led row with button input
       b11 : inputAlu_b = 10; // for division*/
    
    
    
    // standard setting unless otherwise overwritten by each case
    alufn = 0;
    asel = 0;
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111; //temp1 register
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    wdsel = 0;
    level = 0;
    led_out = 5x{{3b0}};
    dec_score_inc = 0;
    dec_score_rst = 0;
    
    
    case(game_fsm.q){
      game_fsm.START:
        dec_score_rst = 1;
        dec_score_inc = 0;
        if(button_1|button_2|button_3|start_button|reset_button){
          if(start_button){
            game_fsm.d = game_fsm.IDLE;}
          else{
            game_fsm.d = game_fsm.START;}//if no button or wrong button is pressed, we stay in that state
        }
      
      //loading the led rom
      game_fsm.IDLE:
        level = 0;
        led_out = led_in;
        game_fsm.d = game_fsm.CHECKVALID_INPUT;
      
      game_fsm.CHECKVALID_INPUT:
        if(button_1|button_2|button_3|start_button|reset_button){
          we_regfile = 1;
          wdsel = 01;
          regfile_write_address = 4b0000; //button input register
          if(button_1){
            data_goto_reg = 16b001;
          }
          else if(button_2){
            data_goto_reg = 16b010;
          }
          else if(button_3){
            data_goto_reg = 16b100;}
          else{
            data_goto_reg = 16b111;} //if start_button or reset_button or any other button was pressed
        }
        game_fsm.d = game_fsm.CORRECT_ANS_CHECK;
      
      
      //checks buttn input with first row of led
      game_fsm.CORRECT_ANS_CHECK:
        alufn = 6b110010; //cmpeq comparator
        we_regfile = 0;
        regfile_read_address_a = 4b0000; //button input register
        bsel = b10; //the first row of led
        if(alu_read){
          game_fsm.d = game_fsm.INCREASE_SCORE;
        }
        else{
          game_fsm.d = game_fsm.GAMEOVER;}
      
      game_fsm.INCREASE_SCORE:
        dec_score_inc = 1;
        alufn = 6b0; //add comparator
        we_regfile = 1;
        regfile_write_address = b0010; //score register
        bsel = b01; //adds 1
        game_fsm.d = game_fsm.SCORE_10;
      
      game_fsm.SCORE_10:
        alufn = 6b000101; //division operator
        we_regfile = 0;
        regfile_read_address_a = b0010; //score register
        bsel = b11; //is the value 10
        if(alu_read == 0){
          //rewriting the level register to contain the new level
          wdsel = b01;
          we_regfile = 1;
          regfile_write_address = b0001; //level register
          asel = b00;
          bsel = b01; //adds 1
          level = alu_read[2];
          game_fsm.d = game_fsm.GAME_CONT;
        }
        game_fsm.d = game_fsm.GAME_CONT;
      
      //clearing button input value in regfile
      game_fsm.GAME_CONT:
        we_regfile = 1;
        wdsel = b01;
        regfile_write_address = b0000; //button input regfile
        asel = b01; //set the button input reg value to 0
        game_fsm.d = game_fsm.CHECKVALID_INPUT;
      
      game_fsm.GAMEOVER:
        //led all switch off and only displays the final score
        led_out = 5x{{3b0}};
        if(reset_button){
          game_fsm.d = game_fsm.RESET_SCORE;}
        else{
          game_fsm.d = game_fsm.GAMEOVER;}
      
      //resetting the resepective values in the register to 0
      game_fsm.RESET_SCORE:
        dec_score_rst = 1;
        dec_score_inc = 0;
        we_regfile = 1;
        wdsel = b01;
        regfile_write_address = b0010; //score register
        asel = b01;
        game_fsm.d = game_fsm.RESET_BUTTON_IN;
      
      game_fsm.RESET_BUTTON_IN:
        we_regfile = 1;
        wdsel = b01;
        regfile_write_address = b0000; //button_input register
        asel = b01;
        game_fsm.d = game_fsm.RESET_LEVEL;
      
      game_fsm.RESET_LEVEL:
        we_regfile = 1;
        wdsel = b01;
        regfile_write_address = b0001; //level register
        asel = b01;
        game_fsm.d = game_fsm.RESET_TEMP;
      
      game_fsm.RESET_TEMP:
        we_regfile = 1;
        wdsel = b01;
        regfile_write_address = b1111; //temp register
        asel = b01;
        game_fsm.d = game_fsm.START;
      
      default:
        game_fsm.d = game_fsm.START;
      
      
    }
    
    
    
  }
}